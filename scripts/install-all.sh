#!/bin/bash

# Script de Instala√ß√£o Completa - FTP Dashboard
# Funciona em qualquer sistema Linux
set -e

echo "üöÄ Instala√ß√£o Completa do FTP Dashboard"
echo "========================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para detectar o sistema operacional
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
            VER=$VERSION_ID
        else
            OS=$(uname -s)
            VER=$(uname -r)
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macOS"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        OS="Windows"
    else
        OS="unknown"
    fi
    echo $OS
}

# Fun√ß√£o para instalar depend√™ncias do sistema
install_system_deps() {
    echo -e "${BLUE}üì¶ Instalando depend√™ncias do sistema...${NC}"
    
    OS=$(detect_os)
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        echo "üîÑ Atualizando reposit√≥rios..."
        sudo apt-get update
        
        echo "üì¶ Instalando depend√™ncias..."
        sudo apt-get install -y curl wget git build-essential net-tools
        
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"RHEL"* ]] || [[ "$OS" == *"Fedora"* ]]; then
        echo "üì¶ Instalando depend√™ncias..."
        sudo yum install -y curl wget git gcc net-tools
        
    elif [[ "$OS" == *"Amazon Linux"* ]]; then
        echo "üì¶ Instalando depend√™ncias..."
        sudo yum install -y curl wget git gcc net-tools
        
    else
        echo -e "${YELLOW}‚ö†Ô∏è Sistema n√£o reconhecido, tentando instalar depend√™ncias b√°sicas...${NC}"
        # Tentar instalar curl e wget
        sudo apt-get update 2>/dev/null || sudo yum update 2>/dev/null || true
        sudo apt-get install -y curl wget 2>/dev/null || sudo yum install -y curl wget 2>/dev/null || true
    fi
    
    echo -e "${GREEN}‚úÖ Depend√™ncias do sistema instaladas${NC}"
}

# Fun√ß√£o para instalar Docker
install_docker() {
    echo -e "${BLUE}üê≥ Instalando Docker...${NC}"
    
    OS=$(detect_os)
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        echo "üì¶ Instalando Docker no Ubuntu/Debian..."
        
        # Remover vers√µes antigas
        sudo apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
        
        # Instalar depend√™ncias
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
        
        # Adicionar chave GPG oficial do Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        
        # Adicionar reposit√≥rio
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Instalar Docker
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        
        # Adicionar usu√°rio ao grupo docker
        sudo usermod -aG docker $USER
        
        # Habilitar e iniciar Docker
        sudo systemctl enable docker
        sudo systemctl start docker
        
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"RHEL"* ]] || [[ "$OS" == *"Fedora"* ]]; then
        echo "üì¶ Instalando Docker no CentOS/RHEL/Fedora..."
        
        # Instalar depend√™ncias
        sudo yum install -y yum-utils
        
        # Adicionar reposit√≥rio
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        
        # Instalar Docker
        sudo yum install -y docker-ce docker-ce-cli containerd.io
        
        # Adicionar usu√°rio ao grupo docker
        sudo usermod -aG docker $USER
        
        # Habilitar e iniciar Docker
        sudo systemctl enable docker
        sudo systemctl start docker
        
    elif [[ "$OS" == *"Amazon Linux"* ]]; then
        echo "üì¶ Instalando Docker no Amazon Linux..."
        
        # Instalar Docker
        sudo yum install -y docker
        
        # Adicionar usu√°rio ao grupo docker
        sudo usermod -aG docker $USER
        
        # Habilitar e iniciar Docker
        sudo systemctl enable docker
        sudo systemctl start docker
        
    else
        echo -e "${YELLOW}‚ö†Ô∏è Sistema n√£o reconhecido, tentando instalar Docker via script oficial...${NC}"
        
        # Usar script oficial do Docker
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
        sudo systemctl enable docker
        sudo systemctl start docker
        rm get-docker.sh
    fi
    
    echo -e "${GREEN}‚úÖ Docker instalado com sucesso${NC}"
}

# Fun√ß√£o para instalar Docker Compose
install_docker_compose() {
    echo -e "${BLUE}üêô Instalando Docker Compose...${NC}"
    
    # Baixar Docker Compose
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    echo -e "${GREEN}‚úÖ Docker Compose instalado com sucesso${NC}"
}

# Fun√ß√£o para configurar firewall
setup_firewall() {
    echo -e "${BLUE}üî• Configurando firewall...${NC}"
    
    OS=$(detect_os)
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        # UFW
        if command -v ufw &> /dev/null; then
            sudo ufw allow 21/tcp
            sudo ufw allow 8000/tcp
            sudo ufw allow 3000/tcp
            sudo ufw allow 40000:40100/tcp
            echo -e "${GREEN}‚úÖ Firewall configurado (UFW)${NC}"
        fi
        
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"RHEL"* ]] || [[ "$OS" == *"Fedora"* ]] || [[ "$OS" == *"Amazon Linux"* ]]; then
        # firewalld
        if command -v firewall-cmd &> /dev/null; then
            sudo firewall-cmd --permanent --add-port=21/tcp
            sudo firewall-cmd --permanent --add-port=8000/tcp
            sudo firewall-cmd --permanent --add-port=3000/tcp
            sudo firewall-cmd --permanent --add-port=40000-40100/tcp
            sudo firewall-cmd --reload
            echo -e "${GREEN}‚úÖ Firewall configurado (firewalld)${NC}"
        fi
    fi
}

# Fun√ß√£o para criar usu√°rio do sistema
create_system_user() {
    echo -e "${BLUE}üë§ Criando usu√°rio do sistema...${NC}"
    
    # Verificar se usu√°rio j√° existe
    if ! id "ftpuser" &>/dev/null; then
        sudo useradd -m -s /bin/bash ftpuser
        echo -e "${GREEN}‚úÖ Usu√°rio ftpuser criado${NC}"
    else
        echo -e "${YELLOW}‚ÑπÔ∏è Usu√°rio ftpuser j√° existe${NC}"
    fi
}

# Fun√ß√£o para configurar SSL
setup_ssl() {
    echo -e "${BLUE}üîí Configurando SSL...${NC}"
    
    # Criar diret√≥rio SSL
    mkdir -p ssl
    
    # Gerar certificado auto-assinado
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout ssl/key.pem -out ssl/cert.pem \
        -subj "/C=BR/ST=State/L=City/O=Organization/CN=localhost" 2>/dev/null || {
        echo -e "${YELLOW}‚ö†Ô∏è N√£o foi poss√≠vel gerar certificado SSL (openssl n√£o encontrado)${NC}"
    }
    
    echo -e "${GREEN}‚úÖ SSL configurado${NC}"
}

# Fun√ß√£o para verificar instala√ß√£o
verify_installation() {
    echo -e "${BLUE}üîç Verificando instala√ß√£o...${NC}"
    
    # Verificar Docker
    if command -v docker &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker instalado${NC}"
    else
        echo -e "${RED}‚ùå Docker n√£o encontrado${NC}"
        return 1
    fi
    
    # Verificar Docker Compose
    if command -v docker-compose &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker Compose instalado${NC}"
    else
        echo -e "${RED}‚ùå Docker Compose n√£o encontrado${NC}"
        return 1
    fi
    
    # Verificar se Docker est√° rodando
    if docker info &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker est√° rodando${NC}"
    else
        echo -e "${RED}‚ùå Docker n√£o est√° rodando${NC}"
        return 1
    fi
    
    return 0
}

# Fun√ß√£o principal
main() {
    echo -e "${BLUE}üîç Detectando sistema operacional...${NC}"
    OS=$(detect_os)
    echo -e "${GREEN}üñ•Ô∏è Sistema: $OS${NC}"
    
    # Verificar se √© root
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}‚ùå N√£o execute este script como root${NC}"
        exit 1
    fi
    
    echo ""
    echo -e "${BLUE}üìã Passos da instala√ß√£o:${NC}"
    echo "1. Instalar depend√™ncias do sistema"
    echo "2. Instalar Docker"
    echo "3. Instalar Docker Compose"
    echo "4. Configurar firewall"
    echo "5. Criar usu√°rio do sistema"
    echo "6. Configurar SSL"
    echo "7. Verificar instala√ß√£o"
    echo ""
    
    read -p "Continuar com a instala√ß√£o? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚ùå Instala√ß√£o cancelada${NC}"
        exit 1
    fi
    
    # Executar passos
    install_system_deps
    install_docker
    install_docker_compose
    setup_firewall
    create_system_user
    setup_ssl
    
    echo ""
    echo -e "${BLUE}üîÑ Recarregando grupos do usu√°rio...${NC}"
    newgrp docker || true
    
    # Verificar instala√ß√£o
    if verify_installation; then
        echo ""
        echo -e "${GREEN}‚úÖ Instala√ß√£o do sistema conclu√≠da com sucesso!${NC}"
        echo ""
        echo -e "${BLUE}üöÄ Agora execute o deploy:${NC}"
        echo "   ./scripts/deploy.sh"
        echo ""
        echo -e "${BLUE}üìã Informa√ß√µes importantes:${NC}"
        echo "   - Usu√°rio FTP padr√£o: admin/admin123"
        echo "   - Porta FTP: 21"
        echo "   - Porta Web: 3000"
        echo "   - Porta API: 8000"
        echo "   - Diret√≥rio FTP: /home/ftpusers"
        echo ""
        echo -e "${GREEN}üéâ Tudo pronto! Execute o deploy para iniciar a aplica√ß√£o.${NC}"
    else
        echo -e "${RED}‚ùå Instala√ß√£o falhou. Verifique os erros acima.${NC}"
        exit 1
    fi
}

# Executar fun√ß√£o principal
main 