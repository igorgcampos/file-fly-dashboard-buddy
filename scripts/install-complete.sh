#!/bin/bash

# Script de Instala√ß√£o Completa - FTP Dashboard
set -e

echo "üöÄ Instala√ß√£o Completa do FTP Dashboard"
echo "========================================"

# Fun√ß√£o para detectar o sistema operacional
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
            VER=$VERSION_ID
        else
            OS=$(uname -s)
            VER=$(uname -r)
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macOS"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        OS="Windows"
    else
        OS="unknown"
    fi
    echo $OS
}

# Fun√ß√£o para instalar depend√™ncias do sistema
install_system_deps() {
    echo "üì¶ Instalando depend√™ncias do sistema..."
    
    OS=$(detect_os)
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        sudo apt-get update
        sudo apt-get install -y curl wget git build-essential
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"RHEL"* ]] || [[ "$OS" == *"Fedora"* ]]; then
        sudo yum install -y curl wget git gcc
    elif [[ "$OS" == "macOS" ]]; then
        echo "üçé Para macOS, instale o Docker Desktop: https://docs.docker.com/desktop/install/mac-install/"
        exit 1
    elif [[ "$OS" == "Windows" ]]; then
        echo "ü™ü Para Windows, instale o Docker Desktop: https://docs.docker.com/desktop/install/windows-install/"
        exit 1
    else
        echo "‚ùå Sistema operacional n√£o suportado"
        exit 1
    fi
}

# Fun√ß√£o para instalar Docker
install_docker() {
    echo "üê≥ Instalando Docker..."
    
    OS=$(detect_os)
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        # Ubuntu/Debian
        echo "üì¶ Instalando Docker no Ubuntu/Debian..."
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo usermod -aG docker $USER
        sudo systemctl enable docker
        sudo systemctl start docker
        
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"RHEL"* ]] || [[ "$OS" == *"Fedora"* ]]; then
        # CentOS/RHEL/Fedora
        echo "üì¶ Instalando Docker no CentOS/RHEL/Fedora..."
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        sudo yum install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl enable docker
        sudo systemctl start docker
        sudo usermod -aG docker $USER
    fi
    
    echo "‚úÖ Docker instalado com sucesso!"
}

# Fun√ß√£o para instalar Docker Compose
install_docker_compose() {
    echo "üêô Instalando Docker Compose..."
    
    # Baixar Docker Compose
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    echo "‚úÖ Docker Compose instalado com sucesso!"
}

# Fun√ß√£o para configurar firewall
setup_firewall() {
    echo "üî• Configurando firewall..."
    
    OS=$(detect_os)
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        # UFW
        sudo ufw allow 21/tcp
        sudo ufw allow 8000/tcp
        sudo ufw allow 3000/tcp
        sudo ufw allow 40000:40100/tcp
        echo "‚úÖ Firewall configurado (UFW)"
        
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"RHEL"* ]] || [[ "$OS" == *"Fedora"* ]]; then
        # firewalld
        sudo firewall-cmd --permanent --add-port=21/tcp
        sudo firewall-cmd --permanent --add-port=8000/tcp
        sudo firewall-cmd --permanent --add-port=3000/tcp
        sudo firewall-cmd --permanent --add-port=40000-40100/tcp
        sudo firewall-cmd --reload
        echo "‚úÖ Firewall configurado (firewalld)"
    fi
}

# Fun√ß√£o para criar usu√°rio do sistema
create_system_user() {
    echo "üë§ Criando usu√°rio do sistema..."
    
    # Verificar se usu√°rio j√° existe
    if ! id "ftpuser" &>/dev/null; then
        sudo useradd -m -s /bin/bash ftpuser
        echo "‚úÖ Usu√°rio ftpuser criado"
    else
        echo "‚ÑπÔ∏è Usu√°rio ftpuser j√° existe"
    fi
}

# Fun√ß√£o para baixar o projeto
download_project() {
    echo "üì• Baixando projeto..."
    
    # Se estamos no diret√≥rio do projeto, n√£o baixar
    if [ -f "docker-compose.yml" ]; then
        echo "‚ÑπÔ∏è Projeto j√° existe no diret√≥rio atual"
        return
    fi
    
    # Aqui voc√™ pode adicionar o comando git clone se o projeto estiver em um reposit√≥rio
    # git clone https://github.com/seu-usuario/file-fly-dashboard-buddy.git
    # cd file-fly-dashboard-buddy
    
    echo "‚ö†Ô∏è Por favor, clone o reposit√≥rio manualmente ou copie os arquivos para este diret√≥rio"
    exit 1
}

# Fun√ß√£o para configurar SSL (opcional)
setup_ssl() {
    echo "üîí Configurando SSL..."
    
    # Criar diret√≥rio SSL
    mkdir -p ssl
    
    # Gerar certificado auto-assinado
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout ssl/key.pem -out ssl/cert.pem \
        -subj "/C=BR/ST=State/L=City/O=Organization/CN=localhost"
    
    echo "‚úÖ Certificado SSL gerado"
}

# Fun√ß√£o principal
main() {
    echo "üîç Detectando sistema operacional..."
    OS=$(detect_os)
    echo "üñ•Ô∏è Sistema: $OS"
    
    # Verificar se √© root
    if [ "$EUID" -eq 0 ]; then
        echo "‚ùå N√£o execute este script como root"
        exit 1
    fi
    
    echo ""
    echo "üìã Passos da instala√ß√£o:"
    echo "1. Instalar depend√™ncias do sistema"
    echo "2. Instalar Docker"
    echo "3. Instalar Docker Compose"
    echo "4. Configurar firewall"
    echo "5. Criar usu√°rio do sistema"
    echo "6. Baixar projeto"
    echo "7. Configurar SSL"
    echo "8. Deploy da aplica√ß√£o"
    echo ""
    
    read -p "Continuar com a instala√ß√£o? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Instala√ß√£o cancelada"
        exit 1
    fi
    
    # Executar passos
    install_system_deps
    install_docker
    install_docker_compose
    setup_firewall
    create_system_user
    download_project
    setup_ssl
    
    echo ""
    echo "üîÑ Recarregando grupos do usu√°rio..."
    newgrp docker
    
    echo ""
    echo "‚úÖ Instala√ß√£o do sistema conclu√≠da!"
    echo ""
    echo "üöÄ Agora execute o deploy:"
    echo "   ./scripts/deploy.sh"
    echo ""
    echo "üìã Informa√ß√µes importantes:"
    echo "   - Usu√°rio FTP padr√£o: admin/admin123"
    echo "   - Porta FTP: 21"
    echo "   - Porta Web: 3000"
    echo "   - Porta API: 8000"
    echo "   - Diret√≥rio FTP: /home/ftpusers"
}

# Executar fun√ß√£o principal
main 